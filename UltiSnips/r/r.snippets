# common {{{1

priority 1
snippet todo "todo with timestamp"
TODO (`!v strftime('%Y-%m-%d')`): $0
endsnippet
# put date in () instead of default [], to match r syntax highlighting

snippet >> "magrittrpipe" iA
%>%
endsnippet

# snippet __ "rassign" A
# <-
# endsnippet

snippet fn "function"
function(${1}) \{
	${2:${VISUAL:}}
\}
endsnippet

snippet dcat "print ## debug" b
cat("\`$1\` is \n") ## debug
print(${1:var}) 
endsnippet

snippet ret "return" 
return( ${1:${VISUAL}} )
endsnippet

snippet so "source" b
source(${2:"./$1"})
endsnippet

snippet "cat?p" "cat(paste0(...))" r
cat(paste0(${1:${VISUAL}}))
endsnippet

snippet "ex(i(st?)?)?" "exists" wr
exists("${1:${VISUAL}}")
endsnippet


# control flow {{{1 

snippet for "for loop"
for ($1) {
	${2:${VISUAL}}
}
endsnippet

snippet while "while loop"
while ($1) {
	${2:${VISUAL}}
}
endsnippet

snippet ifel "if .. else"
if ($1) {
	${2:${VISUAL}}
} else {
	$3
}
endsnippet

snippet if "if block"
if ($1) {
	${2:${VISUAL}}
}
endsnippet

snippet ei "else if block"
else if ($1) {
	${2:${VISUAL}}
}
endsnippet

snippet el "else block"
else {
	${1:${VISUAL}}
}
endsnippet


snippet switch "switch case" b
switch( ${1:EXPR}, 
	${2:case1_val} = ${3:{expr1}},
	${4:case2_val} = ${5:{expr2}},
	stop(${6:"msg"})	# default_expr
)
endsnippet

snippet tryc "tryCatch" b
tryCatch({
	${1:${VISUAL:expr}}

}, ${2:error} = function(e) {
	$3

}, finally = {
	$4

})
endsnippet


# modify variable and replace {{{1

snippet "(\w+)\+\+" "var++" wrA
`!p snip.rv=match.group(1)` <- `!p snip.rv=match.group(1)` + 1
endsnippet

snippet "(\w+)\s*\+\=" "var+=" wrA
`!p snip.rv=match.group(1)` <- `!p snip.rv=match.group(1)` + $0
endsnippet

snippet "(\w+)\-\-" "var--" wrA
`!p snip.rv=match.group(1)` <- `!p snip.rv=match.group(1)` - 1
endsnippet

snippet "(\w+)\s*\-\=" "var-=" wrA
`!p snip.rv=match.group(1)` <- `!p snip.rv=match.group(1)` - $0
endsnippet

snippet "(\w+)\s*\%\>\%\=" "var>>=" wrA
`!p snip.rv=match.group(1)` <- `!p snip.rv=match.group(1)` %>%
endsnippet

snippet "(\w+)\s*\(\=" "var(=  x <- func(x)" wrA
`!p snip.rv=match.group(1)` <- ${1:func}(`!p snip.rv=match.group(1)`$2)	
endsnippet


# plotting {{{1

snippet parmf "par(mfrow=c(nr,nc))" b
opar <- par(mfrow=c(${1:nrow},${2:ncol}),
						oma = c(5,4,0,0) + 0.1,
						mar = c(0,0,1,1) + 0.1)
	${3:# plot1}
	${4:# plot2}
par(opar)
$0
endsnippet

snippet plotn "setup plot region" b
plot(NULL, type = 'n', xlim = range($1), ylim = range($2), xlab = '${3:$1}', ylab = '${4:$2}')
$0
endsnippet



# misc {{{1

# auto-expands on map*~
snippet "((map|map2|pmap)(_(lgl|chr|int|dbl|raw|dfr|dfc))?)~" "map*( ~ {  })" rA
`!p snip.rv=match.group(1)`( ~ { ${1:${VISUAL}} })
endsnippet

# microbenchmark
snippet mbm "microbenchmark"
library(microbenchmark)
library(ggplot2)
${1:mbm} <- microbenchmark(
	${2:expr1} = {$3},
	${4:expr2} = {$5},
	times=${7:100L}, 
	check=${8:'${9:equivalent}'}
)
# print($1)
# boxplot($1)
autoplot($1)

endsnippet

# combinations
snippet choose "choose(n,k)" i
choose(${1:n},${2:k})
endsnippet

snippet binom "choose(n,k)" i
choose(${1:n},${2:k})
endsnippet


# vim: foldmethod=marker : ts=2 : sts=0 : sw=0 : noet
