global !p
from usnip_helpers import *
from usnip_tex_contexts import * 	
from usnip_pos_contexts import *
endglobal

# templates ([{1
# ---------

context "top_of_file(snip, 2)"
post_expand "jump_forward(snip, 1)"
snippet doc "Basic template" b
\documentclass[${1:opt}]{${2:article}}

\usepackage{amsmath, amssymb}

\begin{document}

	${0:${VISUAL}}

\end{document}
endsnippet


# preamble ([{1
# --------

post_expand "jump_forward(snip, 2)"
snippet  usep "\usepackage" b
\usepackage${1:[${2:opt}]}{${3:name}}
endsnippet

snippet nc "\newcommand" b
\newcommand{$1}{$2}
endsnippet

snippet rnc "\renewcommand" b
\renewcommand{$1}{$2}
endsnippet

snippet newth "\newtheorem w parent counter" b
\newtheorem{${1:env_name}}{${2:text}}[${3:parent_counter}]
endsnippet

snippet newths "\newtheorem w shared counter" b
\newtheorem{${1:env_name}}[${2:shared_counter}]{${3:text}}
endsnippet

snippet dmo "\DeclareMathOperator{\op}{op}" b
\DeclareMathOperator{${1:\op}}{${2:`!p snip.rv=t[1].lstrip("\\")`}}
endsnippet

snippet dmo* "\DeclareMathOperator*{\op}{op}" bA
\DeclareMathOperator*{${1:\op}}{${2:`!p snip.rv=t[1].lstrip("\\")`}}
endsnippet

snippet ndc "\NewDocumentCommand" b
\NewDocumentCommand{$1}{${2:arg spec}}{%
	$3
}
endsnippet

snippet "if(nv|v|b)(t|f)" "If([No]Value|Boolean)(T|F|TF) xparse helper" r
\If`!p 
if match.group(1) == "nv":
  str1 = "NoValue"
elif match.group(1) == "v":
  str1 = "Value"
else: #match.group(1) == "b"
  str1 = "Boolean"
snip.rv = str1 + match.group(2).upper()
`{${1:cond}}{${2:code}}
endsnippet

snippet "if(nv|v|b)(tf)" "If([No]Value|Boolean)(T|F|TF) xparse helper" r
\If`!p 
if match.group(1) == "nv":
  str1 = "NoValue"
elif match.group(1) == "v":
  str1 = "Value"
else: #match.group(1) == "b"
  str1 = "Boolean"
snip.rv = str1 + match.group(2).upper()
`{${1:cond}}{${2:code_true}}{${3:code_false}}
endsnippet





# sections ([{1
# --------

snippet sec "\section" b
\section{${1:name}}
endsnippet

snippet susec "\subsection" b
\subsection{${1:name}}
endsnippet

snippet sususec "\subsubsection" b
\subsubsection{${1:name}}
endsnippet

snippet para "\paragraph" b
\paragraph{${1:name}}
endsnippet

snippet supara "\subparagraph" b
\subparagraph{${1:name}}
endsnippet

# section headers {{{1
# ---------------

snippet texor "\texorpdfstring, using math in headers" 
\texorpdfstring{${1:${VISUAL:math}}}{${2:ascii}}
endsnippet


# lists ([{1
# ----- 
snippet enum "enumerate" b
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

snippet items "itemize" b
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

snippet it "item" b
\item $0
endsnippet

# common math snippets ([{1

context "math()"
snippet __ "_{}" iA
_{${1:${VISUAL}}}
endsnippet

context "math()"
snippet ^^ "^{}" iA
^{${1:${VISUAL}}}
endsnippet

# superscript with (.)
context "math()"
snippet ^( "^{(.)}" iA
^{(${1:${VISUAL}})}
endsnippet

context "math()"
snippet xx "\times" A
\times $0
endsnippet


context "math()"
snippet ,., ",\dots," iA
, \dots, 
endsnippet

# Use arpeggio mapping instead, see 
#   .vim/after/ftplugin/tex/brackets_arpeggio_tex.vim
# context "math()"
# snippet \{} "\{ \}" iA
# \\{${1:${VISUAL}}\\}
# endsnippet

context "math()"
snippet == " &= (alignment)" A
&=
endsnippet

context "math()"
snippet \= "next line (\\) and &=" A

\\\\ &=
endsnippet

context "math()"
snippet // "frac{}{}" wA
\frac{${1:${VISUAL:n}}}{${2:d}}
endsnippet

context "math()"
post_expand "jump_forward(snip, 1)"
priority 10
snippet 1// "frac{1}{}" wA
\frac{${1:1}}{${2:${VISUAL:d}}}
endsnippet

context "math()"
snippet sm "sum without limits" A
\sum
endsnippet

# press trigger after sm to include limits
context "math()"
snippet \sum "sum_{}^{}"
\sum_{${1:i=1}}^{${2:n}} $3
endsnippet

context "math()"
post_expand "jump_forward(snip, 1)"
snippet pp "partial deriv" i
\frac{\partial$1}{\partial $2} $0
endsnippet

context "math()"
snippet inv "inverse ^{-1}" i
^{-1}
endsnippet

context "math()"
snippet bin "binom{}{}"
\binom{${1:n}}{${2:k}}
endsnippet

context "math()"
snippet te "\text" i
\text{${1:${VISUAL}}}
endsnippet

# math autosubscripts ([{1
# --------------
# context "math()"
# snippet '([A-Za-z])(\d)' "auto subscript" wrA
# `!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
# endsnippet

# context "math()"
# snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
# `!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
# endsnippet

# math accents ([{1
# ------------

# accents for \bar, \hat, \tilde (til), and \breve (brv)
# eg.  til -> tilde{.}
#     Xtil -> tilde{X}    (postfix)
#  \symtil -> tilde{\sym} (postfix)

priority 10
context "math()"
# \overline{$1}$0
snippet "(?<!\\)bar" "bar" r
\bar{${1:${VISUAL}}}$0
endsnippet

priority 20
context "math()"
snippet "([a-zA-Z])bar" "bar_postfix_alpha" riA
\bar{`!p snip.rv=match.group(1)`}
endsnippet

priority 100
context "math()"
snippet "(\\[a-zA-Z]+)bar" "bar_postfix_\sym" riA
\bar{`!p snip.rv=match.group(1)`}
endsnippet


priority 10
context "math()"
snippet "(?<!\\)hat" "hat" r
\hat{${1:${VISUAL}}}$0
endsnippet

priority 20
context "math()"
snippet "([a-zA-Z])hat" "hat_postfix_alpha" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

priority 100
context "math()"
snippet "(\\[a-zA-Z]+)hat" "hat_postfix_\sym" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet


priority 10
context "math()"
snippet "(?<!\\)til" "tilde" r
\tilde{${1:${VISUAL}}}$0
endsnippet

priority 20
context "math()"
snippet "([a-zA-Z])til" "tilde_postfix_alpha" riA
\tilde{`!p snip.rv=match.group(1)`}
endsnippet

priority 100
context "math()"
snippet "(\\[a-zA-Z]+)til" "tilde_postfix_\sym" riA
\tilde{`!p snip.rv=match.group(1)`}
endsnippet


priority 10
context "math()"
snippet "(?<!\\)brv" "breve" r
\breve{${1:${VISUAL}}}$0
endsnippet

priority 20
context "math()"
snippet "([a-zA-Z])brv" "breve_postfix_alpha" riA
\breve{`!p snip.rv=match.group(1)`}
endsnippet

priority 100
context "math()"
snippet "(\\[a-zA-Z]+)brv" "breve_postfix_\sym" riA
\breve{`!p snip.rv=match.group(1)`}
endsnippet


# math mode delims ([{1
# ----------------

# $..$ and \[...\] have moved to .vim/after/ftplugin/tex/brackets_arpeggio_tex.vim

# snippet mk "$...$" wA
# $${1:${VISUAL}}$
# endsnippet
 
# snippet dm "\[...\]" wA
# \[
# 	${1:${VISUAL}}
# ${2:,}\]
# $0
# endsnippet

# environments ([{1
# ------------

snippet "(ben|en|env)" "\begin ... \end" r
\begin{${1:env}}
	${2:${VISUAL}}
\end{$1}
$0
endsnippet
 
snippet eq "equation env"
\begin{equation}
	${1:${VISUAL}}
${2:,}\end{equation}
$0
endsnippet

snippet al "align env"
\begin{align}
	${1:${VISUAL}}
${2:,}\end{align}
$0
endsnippet

snippet ald "aligned env"
\begin{aligned}
	${1:${VISUAL}}
${2:,}\end{aligned}
$0
endsnippet

snippet eqal "equation + aligned"
\begin{equation}
\begin{aligned}
	${1:${VISUAL}}
${2:,}\end{aligned}
\end{equation}
$0
endsnippet

snippet fr "frame" b
\begin{frame}
\frametitle{$1}
	${2:${VISUAL}}
\end{frame}
$0
endsnippet

# envs, starred variants ([{2
# ----
snippet eq* "equation* env" A
\begin{equation*}
	${1:${VISUAL}}
${2:,}\end{equation*}
$0
endsnippet

snippet al* "align* env" A
\begin{align*}
	${1:${VISUAL}}
${2:,}\end{align*}
$0
endsnippet

snippet eqal* "equation* + aligned" A
\begin{equation*}
\begin{aligned}
	${1:${VISUAL}}
${2:,}\end{aligned}
\end{equation*}
$0
endsnippet


